{
    "c": [
      {
        "actions": {
          "finish": [],
          "init": {
            "custom": "-- Custom options\nlocal c = aura_env.config;\n\nlocal _log = function(...)\n    if aura_env and aura_env.config and aura_env.config.enableDebug == true then\n        print(...);\n    end\nend\n\nlocal dispels = {\n    \n    -- Druid\n    [102] = {magic = false, curse = true, poison = true, disease = false }, -- Balance\n    [103] = {magic = false, curse = true, poison = true, disease = false }, -- Feral\n    [104] = {magic = false, curse = true, poison = true, disease = false }, -- Guardian\n    [105] = {magic = true,  curse = true, poison = true, disease = false }, -- Restoration\n    \n    -- Mage\n    [62]  = {magic = false, curse = true, poison = false, disease = false }, -- Arcane\n    [63]  = {magic = false, curse = true, poison = false, disease = false }, -- Fire\n    [64]  = {magic = false, curse = true, poison = false, disease = false }, -- Frost\n    \n    -- Monk\n    [268] = {magic = false, curse = false, poison = true, disease = true }, -- Brewmaster\n    [269] = {magic = false, curse = false, poison = true, disease = true }, -- Windwalker\n    [270] = {magic = true,  curse = false, poison = true, disease = true }, -- Mistweaver\n    \n    -- Paladin\n    [65]  = {magic = true,  curse = false, poison = true, disease = true }, -- Holy\n    [66]  = {magic = false, curse = false, poison = true, disease = true }, -- Protection\n    [70]  = {magic = false, curse = false, poison = true, disease = true }, -- Retribution\n    \n    -- Priest\n    [256] = {magic = true,  curse = false, poison = false, disease = true }, -- Discipline\n    [257] = {magic = true,  curse = false, poison = false, disease = true }, -- Holy\n    [258] = {magic = true,  curse = false, poison = false, disease = true }, -- Shadow\n    \n    -- Shaman\n    [262] = {magic = false, curse = true, poison = false, disease = false }, -- Elemental\n    [263] = {magic = false, curse = true, poison = false, disease = false }, -- Enhancement\n    [264] = {magic = true,  curse = true, poison = false, disease = false }, -- Restoration\n    \n    -- Warlock TODO: Singe Magic\n    [265] = {magic = false, curse = false, poison = false, disease = false }, -- Affliction\n    [266] = {magic = false, curse = false, poison = false, disease = false }, -- Demonology\n    [267] = {magic = false, curse = false, poison = false, disease = false }, -- Destruction\n}\n\nlocal className, classFilename, classId = UnitClass(\"player\")\nlocal specIndex = GetSpecialization();\nlocal specializationId, name, description, icon, role, primaryStat = GetSpecializationInfo(specIndex);\n\naura_env.specializationId = specializationId;\n\naura_env.canDispel = function(auraType)\n    return auraType and dispels and dispels[specializationId] and dispels[specializationId][ string.lower(auraType) ] == true;\nend\n\nlocal function Defaults(priorityOverride)\n    return {\n        enable = true,\n        priority = priorityOverride or 0,\n        stackThreshold = 0\n    }\nend\n\naura_env.whitelist = {\n    [335586] = { enable = true, priority = 0, stackThreshold = 1}, -- Immediate Extermination (Eye of the Jailer Level 5)\n}\n\n-- Default blacklist (from ElvUI)\naura_env.blacklist = {\n    [36900]  = Defaults(), -- Soul Split: Evil!\n    [36901]  = Defaults(), -- Soul Split: Good\n    [36893]  = Defaults(), -- Transporter Malfunction\n    [97821]  = Defaults(), -- Void-Touched\n    [36032]  = Defaults(), -- Arcane Charge\n    [8733]   = Defaults(), -- Blessing of Blackfathom\n    [58539]  = Defaults(), -- Watcher's Corpse\n    [26013]  = Defaults(), -- Deserter\n    [71041]  = Defaults(), -- Dungeon Deserter\n    [41425]  = Defaults(), -- Hypothermia\n    [55711]  = Defaults(), -- Weakened Heart\n    [8326]   = Defaults(), -- Ghost\n    [23445]  = Defaults(), -- Evil Twin\n    [24755]  = Defaults(), -- Tricked or Treated\n    [25163]  = Defaults(), -- Oozeling's Disgusting Aura\n    [124275] = Defaults(), -- Stagger\n    [124274] = Defaults(), -- Stagger\n    [124273] = Defaults(), -- Stagger\n    [117870] = Defaults(), -- Touch of The Titans\n    [123981] = Defaults(), -- Perdition\n    [15007]  = Defaults(), -- Ress Sickness\n    [113942] = Defaults(), -- Demonic: Gateway\n    [89140]  = Defaults(), -- Demonic Rebirth: Cooldown\n    [287825] = Defaults(), -- Lethargy debuff (fight or flight)\n    [325101] = Defaults(), -- Flattered (Kyrian steward thinks yoo-hoo are the best!)\n    [306474] = Defaults(), -- Recharging (Mechagon ring Logic Loop proc)\n    [206151] = Defaults(), -- Challenger's Burden (Mythic+)\n    [396184] = Defaults(), -- Full Ruby Feasted\n};\n\n\n-- If ElvUI enabled, use that blacklist\nlocal enableElvUI = not c or c.enableElvUI == true;\nif ElvUI then\n    \n    _log(\"ElvUI is installed\");\n    \n    if enableElvUI == true then\n        _log(\"Using the ElvUI blacklist\");\n        --local E, L, V, P, G = unpack(ElvUI); --Import: Engine, Locales, PrivateDB, ProfileDB, GlobalDB\n        aura_env.blacklist = ElvDB.global.unitframe.aurafilters.Blacklist.spells;\n    end\nelse\n    _log(\"ElvUI not installed\");\nend\n\n-- Forbearance (pally: divine shield, hand of protection, and lay on hands)\nlocal enableForbearance = not c or c.enableForbearance < 3;\nif not ElvUI or enableElvUI == false or not aura_env.blacklist[25771] or c.enableForbearance > 1 then\n    aura_env.blacklist[25771]  = { enable = c.enableForbearance == 3, priority = 0, stackThreshold = 0};\nend\n\n_log(\"Forbearance=\",aura_env.blacklist[25771].enable);\n\n-- Lust debuffs\nlocal enableLust = not c or c.enableLust < 3;\naura_env.blacklist[57724]  = { enable = not enableLust, priority = 0, stackThreshold = 0}; -- Sated (lust debuff)\naura_env.blacklist[57723]  = { enable = not enableLust, priority = 0, stackThreshold = 0}; -- Exhaustion (heroism debuff)\naura_env.blacklist[390435]  = { enable = not enableLust, priority = 0, stackThreshold = 0}; -- Exhaustion (Fury of the Aspects debuff)\naura_env.blacklist[80354]  = { enable = not enableLust, priority = 0, stackThreshold = 0}; -- Temporal Displacement (timewarp debuff)\naura_env.blacklist[95809]  = { enable = not enableLust, priority = 0, stackThreshold = 0}; -- Insanity debuff (hunter pet heroism: ancient hysteria)\naura_env.blacklist[264689] = { enable = not enableLust, priority = 0, stackThreshold = 0}; -- Fatigued (Primal Rage)\n\naura_env.refreshAuras = function(states, spellID)\n    \n    if not states then return false end\n    \n    if not WeakAuras.myGUID then \n        _log(\"Couldn't find player GUID\");\n        return false \n    end\n    \n    -- If no specific spell id (aura id) was passed, we're updating all auras.\n    local updatingAllAuras = not spellID;\n    \n    local currentAuras = {};\n    \n    -- Manually find the debuff so we can get access to all properties\n    local i = 1;\n    while true do\n        local spellName, icon, stacks, auraType, duration, expirationTime, _, _, _, id = UnitAura(\"player\", i, \"HARMFUL\")\n        \n        if not spellName then break; end\n        \n        currentAuras[id] = true;\n        \n        local whitelist = aura_env.whitelist[id]\n        \n        -- Ignore blacklisted debuffs; Whitelist can override blacklist\n        if aura_env.blacklist and aura_env.blacklist[id] and aura_env.blacklist[id].enable == true and (not whitelist or whitelist.enable == false) then\n            _log(\"refreshAuras ignoring blacklisted debuff: \"..spellName);\n        else\n            -- Are we refreshing all auras or a specific one?\n            if updatingAllAuras or id == spellID then\n                \n                states[id..WeakAuras.myGUID] = {\n                    changed = true,\n                    show = true,\n                    name = WA_ClassColorName(\"player\"),\n                    icon = icon,\n                    stacks = stacks,\n                    progressType = \"timed\",\n                    expirationTime = expirationTime,\n                    duration = duration,\n                    spellID = id,\n                    autoHide = true,\n                    unit = \"player\",\n                    unitDebuffIndex = i,\n                    debuffType = auraType,\n                    isDispellable = aura_env.canDispel(auraType)\n                }\n                \n                -- If we're at 0 doses then we can remove\n                if subEvent == \"SPELL_AURA_DOSE_REMOVED\" and stacks == 0 then\n                    states[id..WeakAuras.myGUID].show = false\n                    -- If this aura has a stack threshold, then hide if it doesn't meet that threshold\n                elseif whitelist and whitelist.stackThreshold > 0 and stacks < whitelist.stackThreshold then\n                    states[id..WeakAuras.myGUID].show = false\n                else                                \n                    _log(\"Showing debuff: \"..spellName);\n                end\n            end\n        end\n        \n        i = i + 1;\n    end\n    \n    -- If we're refreshing all auras, we should remove any auras that have dropped off\n    if updatingAllAuras then\n        --_log(\"Removing auras that have dropped off\");\n        for k,v in pairs(states) do\n            if not currentAuras[v.spellID] then\n                _log(\"Removing: \"..k);\n                v.changed = true\n                v.show = false\n            end\n        end\n    end\nend",
            "do_custom": true
          },
          "start": []
        },
        "alpha": 1,
        "anchorFrameParent": false,
        "anchorFrameType": "SCREEN",
        "anchorPoint": "CENTER",
        "animation": {
          "finish": {
            "duration_type": "seconds",
            "easeStrength": 3,
            "easeType": "none",
            "preset": "slidetop",
            "type": "preset"
          },
          "main": {
            "duration_type": "seconds",
            "easeStrength": 3,
            "easeType": "none",
            "preset": "pulse",
            "type": "none"
          },
          "start": {
            "duration_type": "seconds",
            "easeStrength": 3,
            "easeType": "none",
            "preset": "slidetop",
            "type": "preset"
          }
        },
        "authorOptions": [
          {
            "default": 1,
            "key": "enableLust",
            "name": "Bloodlust / Heroism Debuff",
            "type": "select",
            "useDesc": false,
            "values": [
              "Default",
              "Show",
              "Hide"
            ],
            "width": 1
          },
          {
            "default": 1,
            "key": "enableForbearance",
            "name": "Forbearance",
            "type": "select",
            "useDesc": false,
            "values": [
              "Default",
              "Show",
              "Hide"
            ],
            "width": 1
          },
          {
            "noMerge": false,
            "text": "",
            "type": "header",
            "useName": false,
            "width": 1
          },
          {
            "default": true,
            "key": "enableElvUI",
            "name": "Enable ElvUI blocklist",
            "type": "toggle",
            "useDesc": false,
            "width": 1
          },
          {
            "noMerge": false,
            "text": "",
            "type": "header",
            "useName": false,
            "width": 1
          },
          {
            "collapse": true,
            "groupType": "array",
            "hideReorder": false,
            "key": "ignore",
            "limitType": "none",
            "name": "Debuffs to ignore",
            "nameSource": 3,
            "noMerge": false,
            "size": 10,
            "sortAlphabetically": true,
            "subOptions": [
              {
                "default": true,
                "desc": "Ignore",
                "key": "enable",
                "name": "",
                "type": "toggle",
                "useDesc": true,
                "width": 0.2
              },
              {
                "default": 0,
                "key": "spell",
                "max": 99999999,
                "min": 0,
                "name": "Spell ID",
                "step": 0.05,
                "type": "number",
                "useDesc": false,
                "width": 0.5
              },
              {
                "default": "",
                "key": "desc",
                "length": 10,
                "multiline": false,
                "name": "Description",
                "type": "input",
                "useLength": false,
                "width": 1
              }
            ],
            "type": "group",
            "useCollapse": true,
            "useDesc": false,
            "width": 1
          },
          {
            "noMerge": false,
            "text": "",
            "type": "header",
            "useName": false,
            "width": 1
          },
          {
            "default": false,
            "key": "enableDebug",
            "name": "Enable Debug Log",
            "type": "toggle",
            "useDesc": false,
            "width": 1
          }
        ],
        "color": [
          1,
          1,
          1,
          1
        ],
        "conditions": [
          {
            "changes": [
              {
                "property": "sub.2.border_color",
                "value": [
                  0.6,
                  0.4,
                  0,
                  1
                ]
              },
              {
                "property": "sub.5.glowColor",
                "value": [
                  0.6,
                  0.4,
                  0,
                  1
                ]
              }
            ],
            "check": {
              "op": "==",
              "trigger": 1,
              "value": "Disease",
              "variable": "debuffType"
            }
          },
          {
            "changes": [
              {
                "property": "sub.2.border_color",
                "value": [
                  0,
                  0.6,
                  0,
                  1
                ]
              },
              {
                "property": "sub.5.glowColor",
                "value": [
                  0,
                  0.6,
                  0,
                  1
                ]
              }
            ],
            "check": {
              "op": "==",
              "trigger": 1,
              "value": "Poison",
              "variable": "debuffType"
            }
          },
          {
            "changes": [
              {
                "property": "sub.2.border_color",
                "value": [
                  0.6,
                  0,
                  1,
                  1
                ]
              },
              {
                "property": "sub.5.glowColor",
                "value": [
                  0.6,
                  0,
                  1,
                  1
                ]
              }
            ],
            "check": {
              "op": "==",
              "trigger": 1,
              "value": "Curse",
              "variable": "debuffType"
            }
          },
          {
            "changes": [
              {
                "property": "sub.2.border_color",
                "value": [
                  0.2,
                  0.6,
                  1,
                  1
                ]
              },
              {
                "property": "sub.5.glowColor",
                "value": [
                  0.2,
                  0.6,
                  1,
                  1
                ]
              }
            ],
            "check": {
              "op": "==",
              "trigger": 1,
              "value": "Magic",
              "variable": "debuffType"
            }
          },
          {
            "changes": [
              {
                "property": "sub.4.text_visible"
              }
            ],
            "check": {
              "op": "<=",
              "trigger": 1,
              "value": "1",
              "variable": "stacks"
            }
          },
          {
            "changes": [
              {
                "property": "sound",
                "value": {
                  "sound": "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
                  "sound_channel": "Dialog",
                  "sound_type": "Play"
                }
              },
              []
            ],
            "check": {
              "checks": [
                {
                  "op": "==",
                  "trigger": 1,
                  "value": "209858",
                  "variable": "spellID"
                },
                {
                  "op": ">=",
                  "trigger": 1,
                  "value": "20",
                  "variable": "stacks"
                }
              ],
              "trigger": -2,
              "variable": "AND"
            }
          },
          {
            "changes": [
              {
                "property": "sound",
                "value": {
                  "sound": 1,
                  "sound_channel": "Dialog",
                  "sound_type": "Play"
                }
              }
            ],
            "check": {
              "op": "==",
              "trigger": 1,
              "value": "357581",
              "variable": "spellID"
            }
          },
          {
            "changes": [
              {
                "property": "sound",
                "value": {
                  "sound": "Interface\\Addons\\SharedMedia_Causese\\sound\\Stop.ogg",
                  "sound_channel": "Dialog",
                  "sound_type": "Play"
                }
              },
              {
                "property": "chat",
                "value": {
                  "message": ">> SLOW DPS <<",
                  "message_type": "SAY"
                }
              }
            ],
            "check": {
              "checks": [
                {
                  "op": "==",
                  "trigger": 1,
                  "value": "240443",
                  "variable": "spellID"
                },
                {
                  "op": ">=",
                  "trigger": 1,
                  "value": "4",
                  "variable": "stacks"
                }
              ],
              "trigger": -2,
              "variable": "AND"
            }
          },
          {
            "changes": [
              {
                "property": "sub.5.glow",
                "value": true
              },
              {
                "property": "sub.2.border_visible"
              }
            ],
            "check": {
              "trigger": 1,
              "value": 1,
              "variable": "isDispellable"
            }
          }
        ],
        "config": {
          "enableDebug": false,
          "enableElvUI": false,
          "enableForbearance": 1,
          "enableLust": 3,
          "ignore": [
            {
              "desc": "Lust: Sated",
              "enable": true,
              "spell": 57724
            },
            {
              "desc": "Lust: Exhaustion",
              "enable": true,
              "spell": 57723
            }
          ]
        },
        "cooldown": false,
        "cooldownEdge": false,
        "cooldownSwipe": true,
        "cooldownTextDisabled": false,
        "desaturate": false,
        "frameStrata": 1,
        "height": 42,
        "icon": true,
        "iconSource": -1,
        "id": "Dynamic Debuff",
        "information": {
          "forceEvents": true
        },
        "internalVersion": 73,
        "inverse": false,
        "keepAspectRatio": false,
        "load": {
          "class": {
            "multi": []
          },
          "size": {
            "multi": []
          },
          "spec": {
            "multi": []
          },
          "talent": {
            "multi": []
          },
          "use_never": false
        },
        "progressSource": [
          -1,
          ""
        ],
        "regionType": "icon",
        "selfPoint": "CENTER",
        "semver": "1.0.0",
        "subRegions": [
          {
            "type": "subbackground"
          },
          {
            "border_color": [
              1,
              0.07843137254902,
              0.19607843137255,
              1
            ],
            "border_edge": "Square Full White",
            "border_offset": 0,
            "border_size": 3,
            "border_visible": true,
            "type": "subborder"
          },
          {
            "anchorXOffset": 0,
            "anchorYOffset": 0,
            "rotateText": "NONE",
            "text_anchorPoint": "CENTER",
            "text_anchorYOffset": -2,
            "text_automaticWidth": "Auto",
            "text_color": [
              1,
              1,
              1,
              1
            ],
            "text_fixedWidth": 64,
            "text_font": "Friz Quadrata TT",
            "text_fontSize": 24,
            "text_fontType": "OUTLINE",
            "text_justify": "CENTER",
            "text_selfPoint": "AUTO",
            "text_shadowColor": [
              0,
              0,
              0,
              1
            ],
            "text_shadowXOffset": 0,
            "text_shadowYOffset": 0,
            "text_text": "%p",
            "text_text_format_p_format": "timed",
            "text_text_format_p_time_dynamic_threshold": 60,
            "text_text_format_p_time_format": 0,
            "text_text_format_p_time_legacy_floor": true,
            "text_text_format_p_time_mod_rate": true,
            "text_text_format_p_time_precision": 1,
            "text_text_format_s_format": "none",
            "text_visible": true,
            "text_wordWrap": "WordWrap",
            "type": "subtext"
          },
          {
            "anchorXOffset": 0,
            "anchorYOffset": 0,
            "rotateText": "NONE",
            "text_anchorPoint": "TOP",
            "text_automaticWidth": "Auto",
            "text_color": [
              1,
              1,
              1,
              1
            ],
            "text_fixedWidth": 64,
            "text_font": "PT Sans Narrow",
            "text_fontSize": 27,
            "text_fontType": "OUTLINE",
            "text_justify": "CENTER",
            "text_selfPoint": "CENTER",
            "text_shadowColor": [
              0,
              0,
              0,
              1
            ],
            "text_shadowXOffset": 0,
            "text_shadowYOffset": 0,
            "text_text": "%s",
            "text_text_format_p_format": "timed",
            "text_text_format_p_time_dynamic_threshold": 60,
            "text_text_format_p_time_format": 0,
            "text_text_format_p_time_precision": 1,
            "text_text_format_s_format": "none",
            "text_visible": true,
            "text_wordWrap": "WordWrap",
            "type": "subtext"
          },
          {
            "glow": false,
            "glowBorder": true,
            "glowColor": [
              1,
              0.07843137254902,
              0.19607843137255,
              1
            ],
            "glowDuration": 1,
            "glowFrequency": 0.25,
            "glowLength": 16,
            "glowLines": 6,
            "glowScale": 1,
            "glowThickness": 3,
            "glowType": "Pixel",
            "glowXOffset": 0,
            "glowYOffset": 0,
            "type": "subglow",
            "useGlowColor": true
          }
        ],
        "tocversion": 100206,
        "triggers": {
          "1": {
            "trigger": {
              "check": "event",
              "custom": "--UNIT_AURA CLEU:SPELL_AURA_APPLIED:SPELL_AURA_REFRESH:SPELL_AURA_APPLIED_DOSE:SPELL_AURA_REMOVED_DOSE:SPELL_AURA_REMOVED\nfunction(allstates, event, ...)\n    \n    local _log = function(...)\n        if aura_env and aura_env.config and aura_env.config.enableDebug == true then\n            print(...);\n        end\n    end\n    \n    if event == \"UNIT_AURA\" then\n        if allstates == nil then return false end\n        local unit = ...\n        if not unit or not unit == \"player\" then return false end\n        if not WeakAuras.myGUID then return false end\n        \n        -- Update auras\n        aura_env.refreshAuras(allstates);\n        \n        return true;\n    end\n    \n    if event == \"COMBAT_LOG_EVENT_UNFILTERED\" then\n        local _, subEvent, _, sourceGUID, sourceName, _, _, destGUID, destName, _, _, spellID, spellName, _, auraType = ...     \n        \n        if subEvent == \"SPELL_AURA_APPLIED\" or subEvent == \"SPELL_AURA_APPLIED_DOSE\" or subEvent == \"SPELL_AURA_REFRESH\" or subEvent == \"SPELL_AURA_REMOVED_DOSE\" then    \n            if UnitIsPlayer(destName) and UnitIsUnit(destName, \"player\") then\n                if auraType == \"HARMFUL\" or auraType == \"DEBUFF\" then\n                    \n                    _log(subEvent..\" \"..spellName);\n                    \n                    local whitelist = aura_env.whitelist[spellID]\n                    \n                    -- Ignore blacklisted debuffs\n                    if aura_env.blacklist and aura_env.blacklist[spellID] and aura_env.blacklist[spellID].enable == true then\n                        \n                        -- Whitelist can override blacklist\n                        if not whitelist or whitelist.enable == false then\n                            _log(\"Ignoring blacklisted spell: \"..spellName);\n                            return true\n                        end\n                    end\n                    \n                    aura_env.refreshAuras(allstates, spellID);\n                    \n                    return true;\n                end\n            end            \n        end\n        \n        if subEvent == \"SPELL_AURA_REMOVED\" and (auraType == \"HARMFUL\" or auraType == \"DEBUFF\") then\n            if UnitIsPlayer(destName) and UnitIsUnit(destName, \"player\") then\n                _log(subEvent..\" \"..spellName);\n                \n                if allstates[spellID..destGUID] then\n                    allstates[spellID..destGUID].changed = true\n                    allstates[spellID..destGUID].show = false\n                    return true\n                end\n            end\n        end\n        \n    end\nend",
              "customVariables": "{\n    spellID = \"number\",\n    stacks = true,\n    name = \"string\",\n    expirationTime = true,\n    debuffType = \"string\",\n    isDispellable = \"bool\"\n}",
              "custom_type": "stateupdate",
              "debuffType": "HELPFUL",
              "event": "Health",
              "events": "UNIT_AURA CLEU:SPELL_AURA_APPLIED:SPELL_AURA_REFRESH:SPELL_AURA_APPLIED_DOSE:SPELL_AURA_REMOVED_DOSE:SPELL_AURA_REMOVED",
              "names": [],
              "spellIds": [],
              "subeventPrefix": "SPELL",
              "subeventSuffix": "_CAST_START",
              "type": "custom",
              "unit": "player"
            },
            "untrigger": []
          },
          "activeTriggerMode": -10,
          "disjunctive": "any"
        },
        "uid": "Ep9XTwLky2Y",
        "url": "https://wago.io/kNr96x2DM/1",
        "useAdjustededMax": false,
        "useAdjustededMin": false,
        "useCooldownModRate": true,
        "useTooltip": true,
        "version": 1,
        "wagoID": "kNr96x2DM",
        "width": 42,
        "xOffset": 0,
        "yOffset": -8,
        "zoom": 0.3
      }
    ],
    "d": {
      "actions": {
        "finish": [],
        "init": [],
        "start": []
      },
      "align": "CENTER",
      "alpha": 1,
      "anchorFrameType": "SCREEN",
      "anchorPoint": "CENTER",
      "animate": true,
      "animation": {
        "finish": {
          "duration_type": "seconds",
          "easeStrength": 3,
          "easeType": "none",
          "type": "none"
        },
        "main": {
          "duration_type": "seconds",
          "easeStrength": 3,
          "easeType": "none",
          "type": "none"
        },
        "start": {
          "duration_type": "seconds",
          "easeStrength": 3,
          "easeType": "none",
          "type": "none"
        }
      },
      "arcLength": 360,
      "authorOptions": [],
      "backdropColor": [
        1,
        1,
        1,
        0.5
      ],
      "border": false,
      "borderBackdrop": "Blizzard Tooltip",
      "borderColor": [
        0,
        0,
        0,
        1
      ],
      "borderEdge": "Square Full White",
      "borderInset": 1,
      "borderOffset": 4,
      "borderSize": 2,
      "centerType": "LR",
      "columnSpace": 1,
      "conditions": [],
      "config": [],
      "constantFactor": "RADIUS",
      "desc": "Shows your debuffs front and center",
      "frameStrata": 1,
      "fullCircle": true,
      "gridType": "RD",
      "gridWidth": 5,
      "groupIcon": "237552",
      "grow": "HORIZONTAL",
      "id": "Dynamic Debuffs",
      "information": {
        "forceEvents": true
      },
      "internalVersion": 73,
      "limit": 5,
      "load": {
        "class": {
          "multi": []
        },
        "size": {
          "multi": []
        },
        "spec": {
          "multi": []
        },
        "talent": {
          "multi": []
        }
      },
      "radius": 200,
      "regionType": "dynamicgroup",
      "rotation": 0,
      "rowSpace": 1,
      "scale": 1,
      "selfPoint": "CENTER",
      "semver": "1.0.0",
      "sort": "none",
      "space": 2,
      "stagger": 0,
      "stepAngle": 15,
      "subRegions": [],
      "tocversion": 100206,
      "triggers": [
        {
          "trigger": {
            "debuffType": "HELPFUL",
            "event": "Health",
            "names": [],
            "spellIds": [],
            "subeventPrefix": "SPELL",
            "subeventSuffix": "_CAST_START",
            "type": "aura2",
            "unit": "player"
          },
          "untrigger": []
        }
      ],
      "uid": "LdLTPk)eBMg",
      "url": "https://wago.io/kNr96x2DM/1",
      "useLimit": false,
      "version": 1,
      "wagoID": "kNr96x2DM",
      "xOffset": 0,
      "yOffset": -70
    },
    "m": "d",
    "s": "5.12.8",
    "v": 1421,
    "wagoID": "kNr96x2DM"
  }